plugins {
    id "com.android.application"
    // START: FlutterFire Configuration
    id 'com.google.gms.google-services'
    // END: FlutterFire Configuration
    id "kotlin-android"
    // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.
    id "dev.flutter.flutter-gradle-plugin"
}

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file("keystore.properties")
if (keystorePropertiesFile.exists()) {
    keystorePropertiesFile.withInputStream { keystoreProperties.load(it) }
}

android {
    namespace = "com.example.babymom_diary"
    compileSdk = flutter.compileSdkVersion
    ndkVersion = flutter.ndkVersion

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId = "com.example.babymom_diary"
        // You can update the following values to match your application needs.
        // For more information, see: https://flutter.dev/to/review-gradle-config.
        minSdk = 23
        targetSdk = flutter.targetSdkVersion
        versionCode = flutter.versionCode
        versionName = flutter.versionName
    }

    signingConfigs {
        release {
            // Resolve signing credentials from local keystore.properties or CI environment.
            def resolvedStoreFile = keystoreProperties['storeFile'] ?: System.getenv('ANDROID_KEYSTORE_PATH')
            def resolvedStorePassword = keystoreProperties['storePassword'] ?: System.getenv('ANDROID_KEYSTORE_PASSWORD')
            def resolvedKeyAlias = keystoreProperties['keyAlias'] ?: System.getenv('ANDROID_KEY_ALIAS')
            def resolvedKeyPassword = keystoreProperties['keyPassword'] ?: System.getenv('ANDROID_KEY_PASSWORD')

            if (resolvedStoreFile) {
                def storeFileBase = keystorePropertiesFile.exists() ? keystorePropertiesFile.parentFile : rootProject.projectDir
                def candidate = new File(resolvedStoreFile)
                if (!candidate.isAbsolute()) {
                    candidate = new File(storeFileBase, resolvedStoreFile)
                }
                storeFile candidate
            }
            if (resolvedStorePassword) {
                storePassword resolvedStorePassword
            }
            if (resolvedKeyAlias) {
                keyAlias resolvedKeyAlias
            }
            if (resolvedKeyPassword) {
                keyPassword resolvedKeyPassword
            }
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        release {
            signingConfig signingConfigs.release
            minifyEnabled false
            shrinkResources false
        }
    }

    flavorDimensions += "env"
    productFlavors {
        local {
            dimension "env"
            applicationIdSuffix ".local"
            versionNameSuffix "-local"
            resValue "string", "app_name", "Milu (Local)"
        }
        prod {
            dimension "env"
            resValue "string", "app_name", "Milu"
        }
    }
}

flutter {
    source = "../.."
}
